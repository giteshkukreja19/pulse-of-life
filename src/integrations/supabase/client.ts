
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hqstezhjggxjuskktlaw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhxc3RlemhqZ2d4anVza2t0bGF3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MjM4MjcsImV4cCI6MjA2MDQ5OTgyN30.LasSEUf39LgRTZnMFiW4mRJNlvRUS7QQvNUc_8dgt9o";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Enhanced realtime subscription setup with better error handling and retry logic
const setupRealtimeSubscription = async () => {
  try {
    // Enable realtime on required tables
    const bloodRequestsChannel = supabase.channel('public:blood_requests');
    const donorsChannel = supabase.channel('public:donors');
    const hospitalsChannel = supabase.channel('public:hospitals');
    
    // Subscribe to all channels with proper error handling
    await bloodRequestsChannel.subscribe((status) => {
      console.log("Blood requests channel status:", status);
      
      if (status === 'CHANNEL_ERROR') {
        console.error("Error with blood_requests channel. Reconnecting in 5s...");
        setTimeout(() => {
          bloodRequestsChannel.subscribe();
        }, 5000);
      }
    });
    
    await donorsChannel.subscribe((status) => {
      console.log("Donors channel status:", status);
      
      if (status === 'CHANNEL_ERROR') {
        console.error("Error with donors channel. Reconnecting in 5s...");
        setTimeout(() => {
          donorsChannel.subscribe();
        }, 5000);
      }
    });
    
    await hospitalsChannel.subscribe((status) => {
      console.log("Hospitals channel status:", status);
      
      if (status === 'CHANNEL_ERROR') {
        console.error("Error with hospitals channel. Reconnecting in 5s...");
        setTimeout(() => {
          hospitalsChannel.subscribe();
        }, 5000);
      }
    });
    
    console.log("Realtime subscriptions established for all tables");
  } catch (error) {
    console.error("Error setting up realtime subscriptions:", error);
    // Attempt to reconnect after a delay
    setTimeout(setupRealtimeSubscription, 10000);
  }
};

// Call this function when the app initializes
setupRealtimeSubscription();

// Export a function to manually reconnect channels if needed
export const reconnectRealtimeChannels = () => {
  console.log("Manually reconnecting realtime channels...");
  setupRealtimeSubscription();
};
